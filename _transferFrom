// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/utils/math/SafeMath.sol";

contract LiquidityPool {
    using SafeMath for uint256;

    address public owner;
    IERC20 public tokenA;
    IERC20 public tokenB;

    uint256 public totalLiquidity;
    mapping(address => uint256) public liquidity;

    event LiquidityAdded(address indexed provider, uint256 amount);
    event LiquidityRemoved(address indexed provider, uint256 amount);

    modifier onlyOwner() {
        require(msg.sender == owner, "Unauthorized: Only the owner can call this function");
        _;
    }

    constructor(address _tokenA, address _tokenB) {
        owner = msg.sender;
        tokenA = IERC20(_tokenA);
        tokenB = IERC20(_tokenB);
    }

    function addLiquidity(uint256 amountA, uint256 amountB) external {
        _transferFrom(msg.sender, amountA, tokenA);
        _transferFrom(msg.sender, amountB, tokenB);

        uint256 share = _calculateShare(amountA, amountB);

        totalLiquidity = totalLiquidity.add(share);
        liquidity[msg.sender] = liquidity[msg.sender].add(share);

        emit LiquidityAdded(msg.sender, share);
    }

    function removeLiquidity(uint256 amount) external {
        require(liquidity[msg.sender] >= amount, "Insufficient liquidity");

        uint256 shareA = _calculateShare(amount, 0);
        uint256 shareB = _calculateShare(0, amount);

        totalLiquidity = totalLiquidity.sub(amount);
        liquidity[msg.sender] = liquidity[msg.sender].sub(amount);

        _transfer(msg.sender, shareA, tokenA);
        _transfer(msg.sender, shareB, tokenB);

        emit LiquidityRemoved(msg.sender, amount);
    }

    function _transfer(address to, uint256 amount, IERC20 token) internal {
        require(token.transfer(to, amount), "Transfer failed");
    }

    function _transferFrom(address from, uint256 amount, IERC20 token) internal {
        require(token.transferFrom(from, address(this), amount), "TransferFrom failed");
    }

    function _calculateShare(uint256 amountA, uint256 amountB) internal view returns (uint256) {
        uint256 balanceA = tokenA.balanceOf(address(this));
        uint256 balanceB = tokenB.balanceOf(address(this));

        return amountA.mul(balanceB).add(amountB.mul(balanceA)).div(balanceA.add(amountA)).div(balanceB.add(amountB));
    }

    function changeOwnership(address newOwner) external onlyOwner {
        owner = newOwner;
    }
}
