// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";

contract EnhancedSmartContract is Ownable {
    mapping(string => uint256) private keyValuePairs;

    event KeyValuePairUpdated(string key, uint256 value);

    // Constructor
    constructor() Ownable() {}

    // Function to update or add a key-value pair, only callable by the owner
    function updateKeyValuePair(string memory key, uint256 value) external onlyOwner {
        keyValuePairs[key] = value;
        emit KeyValuePairUpdated(key, value);
    }

    // Function to retrieve the value for a given key
    function getKeyValuePair(string memory key) external view returns (uint256) {
        return keyValuePairs[key];
    }

    // Function to get the list of keys
    function getKeyList() external view returns (string[] memory) {
        string[] memory keys = new string[](getKeyCount());
        for (uint256 i = 0; i < keys.length; i++) {
            keys[i] = getKeyByIndex(i);
        }
        return keys;
    }

    // Function to get the count of stored keys
    function getKeyCount() public view returns (uint256) {
        return keyList.length;
    }

    // Function to get the key by index
    function getKeyByIndex(uint256 index) public view returns (string memory) {
        require(index < keyList.length, "Index out of bounds");
        return keyList[index];
    }

    // Fallback function to receive Ether
    receive() external payable {}

    // Function to withdraw Ether from the contract, only callable by the owner
    function withdraw(uint256 amount) external onlyOwner {
        require(amount <= address(this).balance, "Insufficient contract balance");
        payable(owner()).transfer(amount);
    }
}
